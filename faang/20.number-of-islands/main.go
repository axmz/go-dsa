package main

import (
	"fmt"
)

type coord struct {
	row int
	col int
}

func numIslands(grid [][]byte) int {
	count := 0

	if len(grid) == 0 {
		return count
	}

	width := len((grid)[0]) - 1
	height := len(grid) - 1

	markAsVisited := func(c coord) {
		grid[c.row][c.col] = byte('0')
	}

	isLand := func(c coord) bool {
		if c.row < 0 || c.row > height || c.col < 0 || c.col > width {
			return false
		}

		return (grid)[c.row][c.col] == '1'
	}

	findNearbyLand := func(c coord, queue *[]coord) {

		markAsVisited(c)
		up := coord{c.row - 1, c.col}
		right := coord{c.row, c.col + 1}
		down := coord{c.row + 1, c.col}
		left := coord{c.row, c.col - 1}

		directions := [4]coord{up, right, down, left}
		for _, dir := range directions {
			if isLand(dir) {
				markAsVisited(dir)
				*queue = append(*queue, dir)
			}
		}
	}

	exploreIsland := func(c coord) {
		queue := []coord{c}

		for len(queue) > 0 {
			c := queue[0]
			findNearbyLand(c, &queue)
			queue = queue[1:]
		}
	}

	for i, r := range grid {
		for j, b := range r {
			if b == '1' {
				count++
				exploreIsland(coord{row: i, col: j})
			}
		}
	}

	return count
}

func main() {
	// grid := [][]byte{
	// 	{'1', '1', '1', '1', '0'},
	// 	{'1', '1', '0', '1', '0'},
	// 	{'1', '1', '0', '0', '0'},
	// 	{'0', '0', '1', '0', '1'},
	// }

	grid := [][]byte{
		{'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'},
		{'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'},
		{'1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'},
		{'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'},
		{'1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}}

	res := numIslands(grid)
	fmt.Println(res)
}
